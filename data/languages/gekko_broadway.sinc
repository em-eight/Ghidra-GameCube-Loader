define pcodeop ldexpf;

dPlusRaOrZeroAddressPS: SIMM_PS(RA_OR_ZERO) is SIMM_PS & RA_OR_ZERO     { tmp:4 = RA_OR_ZERO+SIMM_PS; export tmp; }
dPlusRaAddressPS: SIMM_PS(A) is SIMM_PS & A     {tmp:4 = A+SIMM_PS; export tmp;  }

macro load_ps(ps0D, ps1D, EA, W, I) {
	lt:1 = 0;
	ls:1 = 0;
	wFlag:1 = 0;
	lt[0,3] = I[16,3];
	ls[0,3] = I[24,6];
	wFlag = W;
	one:1 = 1;
	floatOne:8 = int2float(one);

	local scale;
	if (ls == 0) goto <noscale>;
	scale = ldexpf(-ls);
	goto <continue_scale>;
	<noscale>
	scale = floatOne;

	<continue_scale>

	if (lt == 4 || lt == 6) goto <int8>;
	if (lt == 5 || lt == 7) goto <int16>;
	goto <float>;

	<int8>
	local x81 = *:1(EA);
	local x82 = *:1(EA + 1);
	ps0D = scale * int2float(x81);
	if (wFlag) goto <int8w1>;
	ps1D = scale * int2float(x82);
	goto inst_next;
	<int8w1>
	ps1D = floatOne;
	goto inst_next;

	<int16>
	local x61 = *:2(EA);
	local x62 = *:2(EA + 2);
	ps0D = scale * int2float(x61);
	if (wFlag) goto <int16w1>;
	ps1D = scale * int2float(x62);
	goto inst_next;
	<int16w1>
	ps1D = floatOne;
	goto inst_next;

	<float>
	ps0D = float2float(*:4(EA));
	if (wFlag) goto <floatw1>;
	ps1D = float2float(*:4(EA + 4));
	goto inst_next;
	<floatw1>
	ps1D = floatOne;
}

:psq_l fD,dPlusRaOrZeroAddressPS,W,I is OP=56 & fD & W & I & dPlusRaOrZeroAddressPS & ps0D & ps1D
{
	EA:4 = dPlusRaOrZeroAddressPS;
	load_ps(ps0D, ps1D, EA, W, I);
}

:psq_lu fD,dPlusRaAddressPS,W,I is OP=57 & fD & A & W & I & dPlusRaAddressPS & ps0D & ps1D
{
	EA:4 = dPlusRaAddressPS;
	A = EA;
	load_ps(ps0D, ps1D, EA, W, I);
}

:psq_lux fD,RA_OR_ZERO,B,WX,IX is OP=4 & fD & RA_OR_ZERO & A & B & WX & IX & XOP_1_6=38 & BIT_0=0 & ps0D & ps1D
{
	EA:4 = RA_OR_ZERO + B;
	A = EA;
	load_ps(ps0D, ps1D, EA, WX, IX);
}

:psq_lx fD,RA_OR_ZERO,B,WX,IX is OP=4 & fD & RA_OR_ZERO & B & WX & IX & XOP_1_6=6 & BIT_0=0 & ps0D & ps1D
{
	EA:4 = RA_OR_ZERO + B;
	load_ps(ps0D, ps1D, EA, WX, IX);
}

macro store_ps(ps0S, ps1S, EA, W, I) {
	lt:1 = 0;
	ls:1 = 0;
	lt[0,3] = I[0,3];
	ls[0,3] = I[8,6];
	wFlag:1 = W;

	local scale;
	if (ls == 0) goto <noscale>;
	scale = ldexpf(ls);
	goto <continue_scale>;
	<noscale>
	one:1 = 1;
	floatOne:8 = int2float(one);
	scale = floatOne;

	<continue_scale>

	if (lt == 4 || lt == 6) goto <int8>;
	if (lt == 5 || lt == 7) goto <int16>;
	goto <float>;

	<int8>
	*:1(EA) = trunc(scale f* ps0S);
	if (wFlag == 1) goto inst_next;
	*:1(EA + 1) = trunc(scale f* ps1S);
	goto inst_next;

	<int16>
	*:2(EA) = trunc(scale f* ps0S);
	if (wFlag == 1) goto inst_next;
	*:2(EA + 2) = trunc(scale f* ps1S);
	goto inst_next;

	<float>
	*:4(EA) = float2float(ps0S);
	if (wFlag == 1) goto inst_next;
	*:4(EA + 4) = float2float(ps1S);
}

:psq_st fS,dPlusRaOrZeroAddressPS,W,I is OP=60 & fS & A & W & I & dPlusRaOrZeroAddressPS & ps0S & ps1S
{
	EA:4 = dPlusRaOrZeroAddressPS;
	store_ps(ps0S, ps1S, EA, W, I);
}

:psq_stu fS,dPlusRaAddressPS,W,I is OP=61 & fS & A & W & I & dPlusRaAddressPS & ps0S & ps1S
{
	EA:4 = dPlusRaAddressPS;
	A = EA;
	store_ps(ps0S, ps1S, EA, W, I);
}

:psq_stux fS,RA_OR_ZERO,B,WX,IX is OP=4 & fS & RA_OR_ZERO & A & B & WX & IX & XOP_1_6=39 & BIT_0=0 & ps0S & ps1S
{
	EA:4 = RA_OR_ZERO + B;
	A = EA;
	store_ps(ps0S, ps1S, EA, WX, IX);
}

:psq_stx fS,RA_OR_ZERO,B,WX,IX is OP=4 & fS & RA_OR_ZERO & B & WX & IX & XOP_1_6=7 & BIT_0=0 & ps0S & ps1S
{
	EA:4 = RA_OR_ZERO + B;
	store_ps(ps0S, ps1S, EA, WX, IX);
}

################################################################
# Paired singles instructions
################################################################

:ps_abs fD,fB is OP=4 & fD & BITS_16_20=0 & fB & XOP_1_10=264 & Rc=0 & ps0D & ps1D & ps0B & ps1B
{
	ps0D = abs(ps0B);
	ps1D = abs(ps1B);
}

:ps_abs. fD,fB is OP=4 & fD & BITS_16_20=0 & fB & XOP_1_10=264 & Rc=1 & ps0D & ps1D & ps0B & ps1B
{
	ps0D = abs(ps0B);
	ps1D = abs(ps1B);
	cr1flags();
}

:ps_add fD,fA,fB is OP=4 & fD & fA & fB & BITS_6_10=0 & XOP_1_5=21 & Rc=0 & ps0D & ps1D & ps0B & ps1B & ps0A & ps1A
{
	ps0D = ps0A f+ ps0B;
	setFPAddFlags(ps0A, ps0B, ps0D);
	ps1D = ps1A f+ ps1B;
}

:ps_add. fD,fA,fB is OP=4 & fD & fA & fB & BITS_6_10=0 & XOP_1_5=21 & Rc=1 & ps0D & ps1D & ps0B & ps1B & ps0A & ps1A
{
	ps0D = ps0A f+ ps0B;
	setFPAddFlags(ps0A, ps0B, ps0D);
	ps1D = ps1A f+ ps1B;
	cr1flags();
}

:ps_cmpo0 CRFD,fA,fB is OP=4 & CRFD & BITS_21_22=0 & fA & fB & XOP_1_10=32 & BIT_0=0 & ps0B & ps1B & ps0A & ps1A
{
	tmp:1 = nan(ps0A) | nan(ps0B);
	fp_cc0 = (ps0A f< ps0B);
	fp_cc1 = (ps0A f> ps0B);
	fp_cc2 = (ps0A f== ps0B);
	CRFD = (fp_cc0 << 3) | (fp_cc1 << 2) | (fp_cc2 << 1) | tmp;	
}

:ps_cmpo1 CRFD,fA,fB is OP=4 & CRFD & BITS_21_22=0 & fA & fB & XOP_1_10=96 & BIT_0=0 & ps0B & ps1B & ps0A & ps1A
{
	tmp:1 = nan(ps1A) | nan(ps1B);
	fp_cc0 = (ps1A f< ps1B);
	fp_cc1 = (ps1A f> ps1B);
	fp_cc2 = (ps1A f== ps1B);
	CRFD = (fp_cc0 << 3) | (fp_cc1 << 2) | (fp_cc2 << 1) | tmp;	
}

:ps_cmpu0 CRFD,fA,fB is OP=4 & CRFD & BITS_21_22=0 & fA & fB & XOP_1_10=0 & BIT_0=0 & ps0B & ps1B & ps0A & ps1A
{
	tmp:1 = nan(ps0A) | nan(ps0B);
	fp_cc0 = (ps0A f< ps0B);
	fp_cc1 = (ps0A f> ps0B);
	fp_cc2 = (ps0A f== ps0B);
	CRFD = (fp_cc0 << 3) | (fp_cc1 << 2) | (fp_cc2 << 1) | tmp;	
}

:ps_cmpu1 CRFD,fA,fB is OP=4 & CRFD & BITS_21_22=0 & fA & fB & XOP_1_10=64 & BIT_0=0 & ps0B & ps1B & ps0A & ps1A
{
	tmp:1 = nan(ps1A) | nan(ps1B);
	fp_cc0 = (ps1A f< ps1B);
	fp_cc1 = (ps1A f> ps1B);
	fp_cc2 = (ps1A f== ps1B);
	CRFD = (fp_cc0 << 3) | (fp_cc1 << 2) | (fp_cc2 << 1) | tmp;	
}

:ps_div fD,fA,fB is OP=4 & fD & fA & fB & BITS_6_10=0 & XOP_1_5=18 & Rc=0 & ps0D & ps1D & ps0B & ps1B & ps0A & ps1A
{
	ps0D = ps0A f/ ps0B;
	setFPDivFlags(ps0A, ps0B, ps0D);
	ps1D = ps1A f/ ps1B;
}

:ps_div. fD,fA,fB is OP=4 & fD & fA & fB & BITS_6_10=0 & XOP_1_5=18 & Rc=1 & ps0D & ps1D & ps0B & ps1B & ps0A & ps1A
{
	ps0D = ps0A f/ ps0B;
	setFPDivFlags(ps0A, ps0B, ps0D);
	ps1D = ps1A f/ ps1B;
	cr1flags();
}

:ps_madd fD,fA,fC,fB is OP=4 & fD & fA & fB & fC & XOP_1_5=29 & Rc=0 & ps0D & ps1D & ps0B & ps1B & ps0A & ps1A & ps0C & ps1C
{
	tmp1:8 = ps0A f* ps0C;
	ps0D = tmp1 f+ ps0B;
	setFPRF(ps0D);
	fp_xx = fp_xx | fp_fi;
	fp_vxsnan = fp_vxsnan | nan(ps0A) | nan(ps0C) | nan(ps0B);
	setSummaryFPSCR();
	tmp2:8 = ps1A f* ps1C;
	ps1D = tmp2 f+ ps1B;
}

:ps_madd. fD,fA,fC,fB is OP=4 & fD & fA & fB & fC & XOP_1_5=29 & Rc=1 & ps0D & ps1D & ps0B & ps1B & ps0A & ps1A & ps0C & ps1C
{
	tmp1:8 = ps0A f* ps0C;
	ps0D = tmp1 f+ ps0B;
	setFPRF(ps0D);
	fp_xx = fp_xx | fp_fi;
	fp_vxsnan = fp_vxsnan | nan(ps0A) | nan(ps0C) | nan(ps0B);
	setSummaryFPSCR();
	tmp2:8 = ps1A f* ps1C;
	ps1D = tmp2 f+ ps1B;
	cr1flags();
}

:ps_madds0 fD,fA,fC,fB is OP=4 & fD & fA & fB & fC & XOP_1_5=14 & Rc=0 & ps0D & ps1D & ps0B & ps1B & ps0A & ps1A & ps0C & ps1C
{
	tmp1:8 = ps0A f* ps0C;
	ps0D = tmp1 f+ ps0B;
	setFPRF(ps0D);
	fp_xx = fp_xx | fp_fi;
	fp_vxsnan = fp_vxsnan | nan(ps0A) | nan(ps0C) | nan(ps0B);
	setSummaryFPSCR();
	tmp2:8 = ps1A f* ps0C;
	ps1D = tmp2 f+ ps1B;
}

:ps_madds0. fD,fA,fC,fB is OP=4 & fD & fA & fB & fC & XOP_1_5=14 & Rc=1 & ps0D & ps1D & ps0B & ps1B & ps0A & ps1A & ps0C & ps1C
{
	tmp1:8 = ps0A f* ps0C;
	ps0D = tmp1 f+ ps0B;
	setFPRF(ps0D);
	fp_xx = fp_xx | fp_fi;
	fp_vxsnan = fp_vxsnan | nan(ps0A) | nan(ps0C) | nan(ps0B);
	setSummaryFPSCR();
	tmp2:8 = ps1A f* ps0C;
	ps1D = tmp2 f+ ps1B;
	cr1flags();
}

:ps_madds1 fD,fA,fC,fB is OP=4 & fD & fA & fB & fC & XOP_1_5=15 & Rc=0 & ps0D & ps1D & ps0B & ps1B & ps0A & ps1A & ps0C & ps1C
{
	tmp1:8 = ps0A f* ps1C;
	ps0D = tmp1 f+ ps0B;
	setFPRF(ps0D);
	fp_xx = fp_xx | fp_fi;
	fp_vxsnan = fp_vxsnan | nan(ps0A) | nan(ps1C) | nan(ps0B);
	setSummaryFPSCR();
	tmp2:8 = ps1A f* ps1C;
	ps1D = tmp2 f+ ps1B;
}

:ps_madds1. fD,fA,fC,fB is OP=4 & fD & fA & fB & fC & XOP_1_5=15 & Rc=1 & ps0D & ps1D & ps0B & ps1B & ps0A & ps1A & ps0C & ps1C
{
	tmp1:8 = ps0A f* ps1C;
	ps0D = tmp1 f+ ps0B;
	setFPRF(ps0D);
	fp_xx = fp_xx | fp_fi;
	fp_vxsnan = fp_vxsnan | nan(ps0A) | nan(ps1C) | nan(ps0B);
	setSummaryFPSCR();
	tmp2:8 = ps1A f* ps1C;
	ps1D = tmp2 f+ ps1B;
	cr1flags();
}

:ps_merge00 fD,fA,fB is OP=4 & fD & fA & fB & XOP_1_10=528 & Rc=0 & ps0D & ps1D & ps0B & ps1B & ps0A & ps1A
{
	ps0D = ps0A;
	ps1D = ps0B;
}

:ps_merge00. fD,fA,fB is OP=4 & fD & fA & fB & XOP_1_10=528 & Rc=1 & ps0D & ps1D & ps0B & ps1B & ps0A & ps1A
{
	ps0D = ps0A;
	ps1D = ps0B;
	cr1flags();
}

:ps_merge01 fD,fA,fB is OP=4 & fD & fA & fB & XOP_1_10=560 & Rc=0 & ps0D & ps1D & ps0B & ps1B & ps0A & ps1A
{
	ps0D = ps0A;
	ps1D = ps1B;
}

:ps_merge01. fD,fA,fB is OP=4 & fD & fA & fB & XOP_1_10=560 & Rc=1 & ps0D & ps1D & ps0B & ps1B & ps0A & ps1A
{
	ps0D = ps0A;
	ps1D = ps1B;
	cr1flags();
}

:ps_merge10 fD,fA,fB is OP=4 & fD & fA & fB & XOP_1_10=592 & Rc=0 & ps0D & ps1D & ps0B & ps1B & ps0A & ps1A
{
	ps0D = ps1A;
	ps1D = ps0B;
}

:ps_merge10. fD,fA,fB is OP=4 & fD & fA & fB & XOP_1_10=592 & Rc=1 & ps0D & ps1D & ps0B & ps1B & ps0A & ps1A
{
	ps0D = ps1A;
	ps1D = ps0B;
	cr1flags();
}

:ps_merge11 fD,fA,fB is OP=4 & fD & fA & fB & XOP_1_10=624 & Rc=0 & ps0D & ps1D & ps0B & ps1B & ps0A & ps1A
{
	ps0D = ps1A;
	ps1D = ps1B;
}

:ps_merge11. fD,fA,fB is OP=4 & fD & fA & fB & XOP_1_10=624 & Rc=1 & ps0D & ps1D & ps0B & ps1B & ps0A & ps1A
{
	ps0D = ps1A;
	ps1D = ps1B;
	cr1flags();
}

:ps_mr fD,fB is OP=4 & fD & BITS_16_20=0 & fB & XOP_1_10=72 & Rc=0 & ps0D & ps1D & ps0B & ps1B
{
	ps0D = ps0B;
	ps1D = ps1B;
}

:ps_mr. fD,fB is OP=4 & fD & BITS_16_20=0 & fB & XOP_1_10=72 & Rc=1 & ps0D & ps1D & ps0B & ps1B
{
	ps0D = ps0B;
	ps1D = ps1B;
	cr1flags();
}

:ps_msub fD,fA,fC,fB is OP=4 & fD & fA & fB & fC & XOP_1_5=28 & Rc=0 & ps0D & ps1D & ps0B & ps1B & ps0A & ps1A & ps0C & ps1C
{
	tmp1:8 = ps0A f* ps0C;
	ps0D = tmp1 f- ps0B;
	setFPRF(ps0D);
	fp_xx = fp_xx | fp_fi;
	fp_vxsnan = fp_vxsnan | nan(fA) | nan(fC) | nan(fB);
	setSummaryFPSCR();
	tmp2:8 = ps1A f* ps1C;
	ps1D = tmp2 f- ps1B;
}

:ps_msub. fD,fA,fC,fB is OP=4 & fD & fA & fB & fC & XOP_1_5=28 & Rc=1 & ps0D & ps1D & ps0B & ps1B & ps0A & ps1A & ps0C & ps1C
{
	tmp1:8 = ps0A f* ps0C;
	ps0D = tmp1 f- ps0B;
	setFPRF(ps0D);
	fp_xx = fp_xx | fp_fi;
	fp_vxsnan = fp_vxsnan | nan(fA) | nan(fC) | nan(fB);
	setSummaryFPSCR();
	tmp2:8 = ps1A f* ps1C;
	ps1D = tmp2 f- ps1B;
	cr1flags();
}

:ps_mul fD,fA,fC is OP=4 & fD & fA & BITS_11_15=0 & fC & XOP_1_5=25 & Rc=0 & ps0D & ps1D & ps0A & ps1A & ps0C & ps1C
{
	ps0D = ps0A f* ps0C;
	setFPMulFlags(ps0A, ps0C, ps0D);
	ps1D = ps1A f* ps1C;
}

:ps_mul. fD,fA,fC is OP=4 & fD & fA & BITS_11_15=0 & fC & XOP_1_5=25 & Rc=1 & ps0D & ps1D & ps0A & ps1A & ps0C & ps1C
{
	ps0D = ps0A f* ps0C;
	setFPMulFlags(ps0A, ps0C, ps0D);
	ps1D = ps1A f* ps1C;
	cr1flags();
}

:ps_muls0 fD,fA,fC is OP=4 & fD & fA & BITS_11_15=0 & fC & XOP_1_5=12 & Rc=0 & ps0D & ps1D & ps0A & ps1A & ps0C & ps1C
{
	ps0D = ps0A f* ps0C;
	setFPMulFlags(ps0A, ps0C, ps0D);
	ps1D = ps1A f* ps0C;
}

:ps_muls0. fD,fA,fC is OP=4 & fD & fA & BITS_11_15=0 & fC & XOP_1_5=12 & Rc=1 & ps0D & ps1D & ps0A & ps1A & ps0C & ps1C
{
	ps0D = ps0A f* ps0C;
	setFPMulFlags(ps0A, ps0C, ps0D);
	ps1D = ps1A f* ps0C;
	cr1flags();
}

:ps_muls1 fD,fA,fC is OP=4 & fD & fA & BITS_11_15=0 & fC & XOP_1_5=13 & Rc=0 & ps0D & ps1D & ps0A & ps1A & ps0C & ps1C
{
	ps0D = ps0A f* ps1C;
	setFPMulFlags(ps0A, ps1C, ps0D);
	ps1D = ps1A f* ps1C;
}

:ps_muls1. fD,fA,fC is OP=4 & fD & fA & BITS_11_15=0 & fC & XOP_1_5=13 & Rc=1 & ps0D & ps1D & ps0A & ps1A & ps0C & ps1C
{
	ps0D = ps0A f* ps1C;
	setFPMulFlags(ps0A, ps1C, ps0D);
	ps1D = ps1A f* ps1C;
	cr1flags();
}

:ps_nabs fD,fB is OP=4 & fD & BITS_16_20=0 & fB & XOP_1_10=136 & Rc=0 & ps0D & ps1D & ps0B & ps1B
{
	ps0D = f- (abs(ps0B));
	ps1D = f- (abs(ps1B));
}

:ps_nabs. fD,fB is OP=4 & fD & BITS_16_20=0 & fB & XOP_1_10=136 & Rc=1 & ps0D & ps1D & ps0B & ps1B
{
	ps0D = f- (abs(ps0B));
	ps1D = f- (abs(ps1B));
	cr1flags();
}

:ps_neg fD,fB is OP=4 & fD & BITS_16_20=0 & fB & XOP_1_10=40 & Rc=0 & ps0D & ps1D & ps0B & ps1B
{
	ps0D = f- ps0B;
	ps1D = f- ps1B;
}

:ps_neg. fD,fB is OP=4 & fD & BITS_16_20=0 & fB & XOP_1_10=40 & Rc=1 & ps0D & ps1D & ps0B & ps1B
{
	ps0D = f- ps0B;
	ps1D = f- ps1B;
	cr1flags();
}

:ps_nmadd fD,fA,fC,fB is OP=4 & fD & fA & fB & fC & XOP_1_5=31 & Rc=0 & ps0D & ps1D & ps0B & ps1B & ps0A & ps1A & ps0C & ps1C
{
	tmp1:8 = ps0A f* ps0C;
	tmp1 = tmp1 f+ ps0B;
	ps0D = f- tmp1;
	setFPRF(ps0D);
	fp_xx = fp_xx | fp_fi;
	fp_vxsnan = fp_vxsnan | nan(ps0A) | nan(ps0C) | nan(ps0B);
	setSummaryFPSCR();
	tmp2:8 = ps1A f* ps1C;
	tmp2 = tmp2 f+ ps1B;
	ps1D = f- tmp2;
}

:ps_nmadd. fD,fA,fC,fB is OP=4 & fD & fA & fB & fC & XOP_1_5=31 & Rc=1 & ps0D & ps1D & ps0B & ps1B & ps0A & ps1A & ps0C & ps1C
{
	tmp1:8 = ps0A f* ps0C;
	tmp1 = tmp1 f+ ps0B;
	ps0D = f- tmp1;
	setFPRF(ps0D);
	fp_xx = fp_xx | fp_fi;
	fp_vxsnan = fp_vxsnan | nan(ps0A) | nan(ps0C) | nan(ps0B);
	setSummaryFPSCR();
	tmp2:8 = ps1A f* ps1C;
	tmp2 = tmp2 f+ ps1B;
	ps1D = f- tmp2;
	cr1flags();
}

:ps_nmsub fD,fA,fC,fB is OP=4 & fD & fA & fB & fC & XOP_1_5=30 & Rc=0 & ps0D & ps1D & ps0B & ps1B & ps0A & ps1A & ps0C & ps1C
{
	tmp1:8 = ps0A f* ps0C;
	tmp1 = tmp1 f- ps0B;
	ps0D = f- tmp1;
	setFPRF(ps0D);
	fp_xx = fp_xx | fp_fi;
	fp_vxsnan = fp_vxsnan | nan(fA) | nan(fC) | nan(fB);
	setSummaryFPSCR();
	tmp2:8 = ps1A f* ps1C;
	tmp2 = tmp2 f- ps1B;
	ps1D = f- tmp2;
}

:ps_nmsub. fD,fA,fC,fB is OP=4 & fD & fA & fB & fC & XOP_1_5=30 & Rc=1 & ps0D & ps1D & ps0B & ps1B & ps0A & ps1A & ps0C & ps1C
{
	tmp1:8 = ps0A f* ps0C;
	tmp1 = tmp1 f- ps0B;
	ps0D = f- tmp1;
	setFPRF(ps0D);
	fp_xx = fp_xx | fp_fi;
	fp_vxsnan = fp_vxsnan | nan(fA) | nan(fC) | nan(fB);
	setSummaryFPSCR();
	tmp2:8 = ps1A f* ps1C;
	tmp2 = tmp2 f- ps1B;
	ps1D = f- tmp2;
	cr1flags();
}

:ps_res fD,fB is OP=4 & fD & BITS_16_20=0 & fB & BITS_6_10=0 & XOP_1_5=24 & Rc=0 & ps0D & ps1D & ps0B & ps1B
{
	one:8 = 1;
	floatOne:8 = int2float(one);
	tmp1:8 = float2float(floatOne f/ ps0B);
	ps0D = float2float(tmp1);
	setFPRF(fD);
	fp_zx = fp_zx | (fB f== 0);
	fp_vxsnan = fp_vxsnan | nan(ps0B);
	setSummaryFPSCR();
	tmp2:8 = float2float(floatOne f/ ps1B);
	ps1D = float2float(tmp2);
}

:ps_res. fD,fB is OP=4 & fD & BITS_16_20=0 & fB & BITS_6_10=0 & XOP_1_5=24 & Rc=1 & ps0D & ps1D & ps0B & ps1B
{
	one:8 = 1;
	floatOne:8 = int2float(one);
	tmp1:8 = float2float(floatOne f/ ps0B);
	ps0D = float2float(tmp1);
	setFPRF(fD);
	fp_zx = fp_zx | (fB f== 0);
	fp_vxsnan = fp_vxsnan | nan(ps0B);
	setSummaryFPSCR();
	tmp2:8 = float2float(floatOne f/ ps1B);
	ps1D = float2float(tmp2);
	cr1flags();
}

:ps_rsqrte fD,fB is OP=4 & fD & BITS_16_20=0 & fB & BITS_6_10=0 & XOP_1_5=26 & Rc=0 & ps0D & ps1D & ps0B & ps1B
{
	one:8 = 1;
	floatOne:8 = int2float(one);
	tmpSqrt1:8 = sqrt(ps0B);
	ps0D = (floatOne f/ tmpSqrt1);
	setFPRF(ps0D);
	fp_xx = fp_xx | fp_fi;
	fp_vxsnan = fp_vxsnan | nan(ps0B);
	setSummaryFPSCR();
	tmpSqrt2:8 = sqrt(ps1B);
	ps1D = (floatOne f/ tmpSqrt2);
}

:ps_rsqrte. fD,fB is OP=4 & fD & BITS_16_20=0 & fB & BITS_6_10=0 & XOP_1_5=26 & Rc=1 & ps0D & ps1D & ps0B & ps1B
{
	one:8 = 1;
	floatOne:8 = int2float(one);
	tmpSqrt1:8 = sqrt(ps0B);
	ps0D = (floatOne f/ tmpSqrt1);
	setFPRF(ps0D);
	fp_xx = fp_xx | fp_fi;
	fp_vxsnan = fp_vxsnan | nan(ps0B);
	setSummaryFPSCR();
	tmpSqrt2:8 = sqrt(ps1B);
	ps1D = (floatOne f/ tmpSqrt2);
	cr1flags();
}

:ps_sel fD,fA,fC,fB is OP=4 & fD & fA & fB & fC & XOP_1_5=23 & Rc=0 & ps0D & ps1D & ps0B & ps1B & ps0A & ps1A & ps0C & ps1C
{
	zero:8 = 0;
	zeroFloat:8 = int2float(zero);
	ps0D = ps0C;
	if (ps0A f>= zeroFloat) goto <ps1test>; 
	ps0D = ps0B;
	<ps1test>
	ps1D = ps1C;
	if (ps1A f>= zeroFloat) goto inst_next; 
	ps1D = ps1B;
}

:ps_sel. fD,fA,fC,fB is OP=4 & fD & fA & fB & fC & XOP_1_5=23 & Rc=1 & ps0D & ps1D & ps0B & ps1B & ps0A & ps1A & ps0C & ps1C
{
	zero:8 = 0;
	zeroFloat:8 = int2float(zero);
	ps0D = ps0C;
	if (ps0A f>= zeroFloat) goto <ps1test>; 
	ps0D = ps0B;
	<ps1test>
	ps1D = ps1C;
	cr1flags();
	if (ps1A f>= zeroFloat) goto inst_next; 
	ps1D = ps1B;
	cr1flags();
}

:ps_sub fD,fA,fB is OP=4 & fD & fA & fB & BITS_6_10=0 & XOP_1_5=20 & Rc=0 & ps0D & ps1D & ps0B & ps1B & ps0A & ps1A
{
	ps0D = ps0A f- ps0B;
	setFPSubFlags(ps0A, ps0B, ps0D);
	ps1D = ps1A f- ps1B;
}

:ps_sub. fD,fA,fB is OP=4 & fD & fA & fB & BITS_6_10=0 & XOP_1_5=20 & Rc=1 & ps0D & ps1D & ps0B & ps1B & ps0A & ps1A
{
	ps0D = ps0A f- ps0B;
	setFPSubFlags(ps0A, ps0B, ps0D);
	ps1D = ps1A f- ps1B;
	cr1flags();
}

:ps_sum0 fD,fA,fC,fB is OP=4 & fD & fA & fB & fC & XOP_1_5=10 & Rc=0 & ps0D & ps1D & ps0B & ps1B & ps0A & ps1A & ps0C & ps1C
{
	ps0D = ps0A f+ ps1B;
	setFPAddFlags(ps0A, ps1B, ps0D);
	ps1D = ps1C;
}

:ps_sum0. fD,fA,fC,fB is OP=4 & fD & fA & fB & fC & XOP_1_5=10 & Rc=1 & ps0D & ps1D & ps0B & ps1B & ps0A & ps1A & ps0C & ps1C
{
	ps0D = ps0A f+ ps1B;
	setFPAddFlags(ps0A, ps1B, ps0D);
	ps1D = ps1C;
	cr1flags();
}

:ps_sum1 fD,fA,fC,fB is OP=4 & fD & fA & fB & fC & XOP_1_5=11 & Rc=0 & ps0D & ps1D & ps0B & ps1B & ps0A & ps1A & ps0C & ps1C
{
	ps0D = ps0C;
	ps1D = ps0A f+ ps1B;
	setFPAddFlags(ps0A, ps1B, ps1D);
}

:ps_sum1. fD,fA,fC,fB is OP=4 & fD & fA & fB & fC & XOP_1_5=11 & Rc=1 & ps0D & ps1D & ps0B & ps1B & ps0A & ps1A & ps0C & ps1C
{
	ps0D = ps0C;
	ps1D = ps0A f+ ps1B;
	setFPAddFlags(ps0A, ps1B, ps1D);
	cr1flags();
}

################################################################
# Cache instructions
################################################################

:dcbz_l RA_OR_ZERO,B is OP=4 & BITS_21_25=0 & RA_OR_ZERO & B & XOP_1_10=1014 & BIT_0=0
{
	ea:4 = RA_OR_ZERO + B;
	dataCacheBlockSetToZeroLocked(ea);
}
